/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package ui;

import code.productCode;
import database.db;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author M_Samly
 */
public class deleteProduct extends javax.swing.JInternalFrame {

    /**
     * Creates new form deleteProduct
     */
    public deleteProduct() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bui = (BasicInternalFrameUI) this.getUI();
        bui.setNorthPane(null);

        show_Product();
    }

    public ArrayList<productCode> ProductList() {
        ArrayList<productCode> ProductList = new ArrayList<>();
        try {
            Connection con;
            Statement st;
            con = db.getConnection();
            st = con.createStatement();
            String query = "Select * from product order by barcode";
            ResultSet rs = st.executeQuery(query);
            productCode pro;
            while (rs.next()) {
                pro = new productCode(rs.getString("Barcode"), rs.getString("Name"), rs.getInt("Quantity"), rs.getFloat("BPrice"), rs.getFloat("WPrice"), rs.getFloat("RPrice"));
                ProductList.add(pro);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return ProductList;
    }

    public void show_Product() {
        ArrayList<productCode> list = ProductList();
        DefaultTableModel model = (DefaultTableModel) tblProduct.getModel();
        Object[] row = new Object[6];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getBarcode();
            row[1] = list.get(i).getName();
            row[2] = list.get(i).getQty();
            row[3] = list.get(i).getBprice();
            row[4] = list.get(i).getWprice();
            row[5] = list.get(i).getRprice();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        txtSearchBarcode = new javax.swing.JTextField();
        txtSerchName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtBarcode = new javax.swing.JLabel();
        txtName = new javax.swing.JLabel();
        txtQty = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtBPrice = new javax.swing.JLabel();
        txtWPrice = new javax.swing.JLabel();
        txtRPrice = new javax.swing.JLabel();

        setBorder(null);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1024, 712));

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Barcode");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Name");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Buying Price");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Wholesale Price");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Retail Price");

        btnReset.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSave.setText("Delete");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barcode", "Name", "Quantity", "B Price", "W Price", "R Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProduct.getTableHeader().setReorderingAllowed(false);
        tblProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductMouseClicked(evt);
            }
        });
        tblProduct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblProductKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblProductKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblProduct);

        txtSearchBarcode.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtSearchBarcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchBarcodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchBarcodeKeyReleased(evt);
            }
        });

        txtSerchName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtSerchName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSerchNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSerchNameKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Search By Name");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Search By Barcode");

        txtBarcode.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtBarcode.setText("-");

        txtName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtName.setText("-");

        txtQty.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtQty.setText("0");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("Quantity");

        txtBPrice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtBPrice.setText("0");

        txtWPrice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtWPrice.setText("0");

        txtRPrice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtRPrice.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(215, 215, 215))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnReset)
                                        .addGap(35, 35, 35)
                                        .addComponent(btnSave))
                                    .addComponent(txtRPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtBarcode, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtWPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 295, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSerchName, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearchBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSerchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtWPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnReset)
                            .addComponent(btnSave)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (!txtBarcode.getText().equals("")) {
            if (!txtName.getText().equals("")) {
                if (!txtQty.getText().equals("")) {
                    if (!txtBPrice.getText().equals("")) {
                        if (!txtWPrice.getText().equals("")) {
                            if (!txtRPrice.getText().equals("")) {

                                int YesORNo = JOptionPane.showConfirmDialog(null, "Do you want Delete Product?", "Delete Option", JOptionPane.YES_NO_OPTION);
                                if (YesORNo == 0) {

                                    try {

                                        Connection con;
                                        PreparedStatement pst;
                                        con = db.getConnection();

                                        String barcode = txtBarcode.getText().toString().trim();
                                        String name = txtName.getText().toString().trim();
                                        int qty = Integer.parseInt(txtQty.getText().toString().trim());
                                        float bprice = Float.parseFloat(txtBPrice.getText().toString().trim());
                                        float wprice = Float.parseFloat(txtWPrice.getText().toString().trim());
                                        float rprice = Float.parseFloat(txtRPrice.getText().toString().trim());

                                        productCode pro = new productCode(barcode, name, qty, bprice, wprice, rprice);

                                        String query = "delete from product where barcode  = '" + pro.getBarcode() + "' AND name = '" + pro.getName() + "' ";

                                        pst = con.prepareStatement(query);
                                        pst.executeUpdate();

                                        JOptionPane.showMessageDialog(null, "Product Sucessfully Deleted!");

                                        txtBarcode.setText("-");
                                        txtName.setText("-");
                                        txtQty.setText("0");
                                        txtBPrice.setText("0.00");
                                        txtWPrice.setText("0.00");
                                        txtRPrice.setText("0.00");

                                        DefaultTableModel model = (DefaultTableModel) tblProduct.getModel();
                                        model.setRowCount(0);
                                        show_Product();

                                        txtBarcode.requestFocus();
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Check The Product Barcode", "Save Error", JOptionPane.ERROR_MESSAGE);
                                        txtBarcode.requestFocus();
                                    }

                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Please select correct product");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Please select correct product");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Please select correct product");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please select correct product");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select correct product");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select correct product");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtSerchNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSerchNameKeyReleased
        // TODO add your handling code here:
        ArrayList<productCode> al = new ArrayList<productCode>();
        //al = new ArrayList<AddItems>();
        String val = txtSerchName.getText().toString().trim();
        try {
            Connection con;
            Statement st;
            con = db.getConnection();
            st = con.createStatement();
            String query = "Select * from product where name like '" + val + "%'";
            ResultSet rs = st.executeQuery(query);
            productCode pro;
            while (rs.next()) {
                pro = new productCode(rs.getString("Barcode"), rs.getString("Name"), rs.getInt("Quantity"), rs.getFloat("BPrice"), rs.getFloat("WPrice"), rs.getFloat("RPrice"));
                al.add(pro);
            }

            DefaultTableModel model = (DefaultTableModel) tblProduct.getModel();
            model.setRowCount(0);
            Object[] row = new Object[6];
            for (int i = 0; i < al.size(); i++) {
                row[0] = al.get(i).getBarcode();
                row[1] = al.get(i).getName();
                row[2] = al.get(i).getQty();
                row[3] = al.get(i).getBprice();
                row[4] = al.get(i).getWprice();
                row[5] = al.get(i).getRprice();
                model.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Cannot find Item Product", "Search Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtSerchNameKeyReleased

    private void txtSearchBarcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchBarcodeKeyReleased
        // TODO add your handling code here:
        ArrayList<productCode> al = new ArrayList<productCode>();
        //al = new ArrayList<AddItems>();
        String val = txtSearchBarcode.getText().toString().trim();
        try {
            Connection con;
            Statement st;
            con = db.getConnection();
            st = con.createStatement();
            String query = "Select * from product where barcode like '" + val + "%'";
            ResultSet rs = st.executeQuery(query);
            productCode pro;
            while (rs.next()) {
                pro = new productCode(rs.getString("Barcode"), rs.getString("Name"), rs.getInt("Quantity"), rs.getFloat("BPrice"), rs.getFloat("WPrice"), rs.getFloat("RPrice"));
                al.add(pro);
            }

            DefaultTableModel model = (DefaultTableModel) tblProduct.getModel();
            model.setRowCount(0);
            Object[] row = new Object[6];
            for (int i = 0; i < al.size(); i++) {
                row[0] = al.get(i).getBarcode();
                row[1] = al.get(i).getName();
                row[2] = al.get(i).getQty();
                row[3] = al.get(i).getBprice();
                row[4] = al.get(i).getWprice();
                row[5] = al.get(i).getRprice();
                model.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Cannot find Item Product", "Search Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtSearchBarcodeKeyReleased

    private void tblProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductMouseClicked
        // TODO add your handling code here:
        int i = tblProduct.getSelectedRow();
        TableModel model = tblProduct.getModel();
        txtBarcode.setText(model.getValueAt(i, 0).toString());
        txtName.setText(model.getValueAt(i, 1).toString());
        txtQty.setText(model.getValueAt(i, 2).toString());
        txtBPrice.setText(model.getValueAt(i, 3).toString());
        txtWPrice.setText(model.getValueAt(i, 4).toString());
        txtRPrice.setText(model.getValueAt(i, 5).toString());
        if (!txtBarcode.getText().equals("")) {
            if (!txtName.getText().equals("")) {
                if (!txtQty.getText().equals("")) {
                    if (!txtBPrice.getText().equals("")) {
                        if (!txtWPrice.getText().equals("")) {
                            if (!txtRPrice.getText().equals("")) {

                                int YesORNo = JOptionPane.showConfirmDialog(null, "Do you want Delete Product?", "Delete Option", JOptionPane.YES_NO_OPTION);
                                if (YesORNo == 0) {

                                    try {

                                        Connection con;
                                        PreparedStatement pst;
                                        con = db.getConnection();

                                        String barcode = txtBarcode.getText().toString().trim();
                                        String name = txtName.getText().toString().trim();
                                        int qty = Integer.parseInt(txtQty.getText().toString().trim());
                                        float bprice = Float.parseFloat(txtBPrice.getText().toString().trim());
                                        float wprice = Float.parseFloat(txtWPrice.getText().toString().trim());
                                        float rprice = Float.parseFloat(txtRPrice.getText().toString().trim());

                                        productCode pro = new productCode(barcode, name, qty, bprice, wprice, rprice);

                                        String query = "delete from product where barcode  = '" + pro.getBarcode() + "' AND name = '" + pro.getName() + "' ";

                                        pst = con.prepareStatement(query);
                                        pst.executeUpdate();

                                        JOptionPane.showMessageDialog(null, "Product Sucessfully Deleted!");

                                        txtBarcode.setText("-");
                                        txtName.setText("-");
                                        txtQty.setText("0");
                                        txtBPrice.setText("0.00");
                                        txtWPrice.setText("0.00");
                                        txtRPrice.setText("0.00");

                                        DefaultTableModel model1 = (DefaultTableModel) tblProduct.getModel();
                                        model1.setRowCount(0);
                                        show_Product();

                                        txtBarcode.requestFocus();
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Check The Product Barcode", "Save Error", JOptionPane.ERROR_MESSAGE);
                                        txtBarcode.requestFocus();
                                    }

                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Please select correct product");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Please select correct product");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Please select correct product");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please select correct product");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select correct product");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select correct product");
        }
    }//GEN-LAST:event_tblProductMouseClicked

    private void tblProductKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblProductKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP) {
            int i = tblProduct.getSelectedRow();
            TableModel model = tblProduct.getModel();
            txtBarcode.setText(model.getValueAt(i, 0).toString());
            txtName.setText(model.getValueAt(i, 1).toString());
            txtQty.setText(model.getValueAt(i, 2).toString());
            txtBPrice.setText(model.getValueAt(i, 3).toString());
            txtWPrice.setText(model.getValueAt(i, 4).toString());
            txtRPrice.setText(model.getValueAt(i, 5).toString());

        }/* else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!txtBarcode.getText().equals("")) {
                if (!txtName.getText().equals("")) {
                    if (!txtQty.getText().equals("")) {
                        if (!txtBPrice.getText().equals("")) {
                            if (!txtWPrice.getText().equals("")) {
                                if (!txtRPrice.getText().equals("")) {

                                    int YesORNo = JOptionPane.showConfirmDialog(null, "Do you want Delete Product?", "Delete Option", JOptionPane.YES_NO_OPTION);
                                    if (YesORNo == 0) {

                                        try {

                                            Connection con;
                                            PreparedStatement pst;
                                            con = db.getConnection();

                                            String barcode = txtBarcode.getText().toString().trim();
                                            String name = txtName.getText().toString().trim();
                                            float qty = Float.parseFloat(txtQty.getText().toString().trim());
                                            float bprice = Float.parseFloat(txtBPrice.getText().toString().trim());
                                            float wprice = Float.parseFloat(txtWPrice.getText().toString().trim());
                                            float rprice = Float.parseFloat(txtRPrice.getText().toString().trim());

                                            productCode pro = new productCode(barcode, name, qty, bprice, wprice, rprice);

                                            String query = "delete from product where barcode = '" + pro.getBarcode() + "' AND name = '" + pro.getName() + "' ";

                                            pst = con.prepareStatement(query);
                                            pst.executeUpdate();

                                            JOptionPane.showMessageDialog(null, "Product Sucessfully Deleted!");

                                            txtBarcode.setText("-");
                                            txtName.setText("-");
                                            txtQty.setText("0");
                                            txtBPrice.setText("0.00");
                                            txtWPrice.setText("0.00");
                                            txtRPrice.setText("0.00");

                                            DefaultTableModel model = (DefaultTableModel) tblProduct.getModel();
                                            model.setRowCount(0);
                                            show_Product();

                                            txtBarcode.requestFocus();
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, "Check The Product Barcode", "Save Error", JOptionPane.ERROR_MESSAGE);
                                            txtBarcode.requestFocus();
                                        }

                                    }

                                } else {
                                    JOptionPane.showMessageDialog(null, "Please select correct product");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Please select correct product");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Please select correct product");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Please select correct product");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please select correct product");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select correct product");
            }
        }*/
    }//GEN-LAST:event_tblProductKeyReleased

    private void txtSerchNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSerchNameKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_ENTER) {
            tblProduct.requestFocus();
            tblProduct.setRowSelectionInterval(0, 0);
        }
    }//GEN-LAST:event_txtSerchNameKeyPressed

    private void txtSearchBarcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchBarcodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_ENTER) {
            tblProduct.requestFocus();
            tblProduct.setRowSelectionInterval(0, 0);
        }
    }//GEN-LAST:event_txtSearchBarcodeKeyPressed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        txtBarcode.setText("-");
        txtName.setText("-");
        txtQty.setText("0");
        txtBPrice.setText("0.00");
        txtWPrice.setText("0.00");
        txtRPrice.setText("0.00");
        txtBarcode.requestFocus();
    }//GEN-LAST:event_btnResetActionPerformed

    private void tblProductKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblProductKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!txtBarcode.getText().equals("")) {
                if (!txtName.getText().equals("")) {
                    if (!txtQty.getText().equals("")) {
                        if (!txtBPrice.getText().equals("")) {
                            if (!txtWPrice.getText().equals("")) {
                                if (!txtRPrice.getText().equals("")) {

                                    int YesORNo = JOptionPane.showConfirmDialog(null, "Do you want Delete Product?", "Delete Option", JOptionPane.YES_NO_OPTION);
                                    if (YesORNo == 0) {

                                        try {

                                            Connection con;
                                            PreparedStatement pst;
                                            con = db.getConnection();

                                            String barcode = txtBarcode.getText().toString().trim();
                                            String name = txtName.getText().toString().trim();
                                            int qty = Integer.parseInt(txtQty.getText().toString().trim());
                                            float bprice = Float.parseFloat(txtBPrice.getText().toString().trim());
                                            float wprice = Float.parseFloat(txtWPrice.getText().toString().trim());
                                            float rprice = Float.parseFloat(txtRPrice.getText().toString().trim());

                                            productCode pro = new productCode(barcode, name, qty, bprice, wprice, rprice);

                                            String query = "delete from product where barcode  = '" + pro.getBarcode() + "' AND name = '" + pro.getName() + "' ";

                                            pst = con.prepareStatement(query);
                                            pst.executeUpdate();

                                            JOptionPane.showMessageDialog(null, "Product Sucessfully Deleted!");

                                            txtBarcode.setText("-");
                                            txtName.setText("-");
                                            txtQty.setText("0");
                                            txtBPrice.setText("0.00");
                                            txtWPrice.setText("0.00");
                                            txtRPrice.setText("0.00");

                                            DefaultTableModel model = (DefaultTableModel) tblProduct.getModel();
                                            model.setRowCount(0);
                                            show_Product();

                                            txtBarcode.requestFocus();
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, "Check The Product Barcode", "Save Error", JOptionPane.ERROR_MESSAGE);
                                            txtBarcode.requestFocus();
                                        }

                                    }

                                } else {
                                    JOptionPane.showMessageDialog(null, "Please select correct product");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Please select correct product");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Please select correct product");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Please select correct product");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please select correct product");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select correct product");
            }
        }
    }//GEN-LAST:event_tblProductKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProduct;
    private javax.swing.JLabel txtBPrice;
    private javax.swing.JLabel txtBarcode;
    private javax.swing.JLabel txtName;
    private javax.swing.JLabel txtQty;
    private javax.swing.JLabel txtRPrice;
    private javax.swing.JTextField txtSearchBarcode;
    private javax.swing.JTextField txtSerchName;
    private javax.swing.JLabel txtWPrice;
    // End of variables declaration//GEN-END:variables
}
