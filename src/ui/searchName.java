/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package ui;

import code.cashierCode;
import database.db;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author M_Samly
 */
public class searchName extends javax.swing.JInternalFrame {

    /**
     * Creates new form Loan
     */
    public searchName() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bui = (BasicInternalFrameUI) this.getUI();
        bui.setNorthPane(null);

        show_Retail();
    }

    public ArrayList<cashierCode> RetailList() {
        ArrayList<cashierCode> RetailList = new ArrayList<>();
        try {
            Connection con;
            Statement st;
            con = db.getConnection();
            st = con.createStatement();
            String query = "Select * from product where quantity > 0 order by barcode";
            ResultSet rs = st.executeQuery(query);
            cashierCode pro;
            while (rs.next()) {
                pro = new cashierCode(rs.getString("barcode"), rs.getString("name"), rs.getInt("quantity"));
                RetailList.add(pro);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return RetailList;
    }

    public void show_Retail() {
        ArrayList<cashierCode> list = RetailList();
        DefaultTableModel model = (DefaultTableModel) tblProduct.getModel();
        Object[] row = new Object[4];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getBarcode();
            row[1] = list.get(i).getName();
            row[2] = list.get(i).getQty();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtSearchName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtSearchBarcode = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBorder(null);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1024, 712));

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barcode", "Name", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProduct.getTableHeader().setReorderingAllowed(false);
        tblProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProduct);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Search By Name");

        txtSearchName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearchName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchNameKeyReleased(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Search By Barcode");

        txtSearchBarcode.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearchBarcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchBarcodeKeyReleased(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search Product");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(127, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearchBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(164, 164, 164))
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jButton1)
                        .addGap(54, 54, 54))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearchBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchNameKeyReleased
        // TODO add your handling code here:
        ArrayList<cashierCode> al = new ArrayList<cashierCode>();
        //al = new ArrayList<AddItems>();
        String val = txtSearchName.getText().toString().trim();
        try {
            Connection con;
            Statement st;
            con = db.getConnection();
            st = con.createStatement();
            String query = "Select * from product where quantity > 0 AND name like '" + val + "%'";
            ResultSet rs = st.executeQuery(query);
            cashierCode pro;
            while (rs.next()) {
                pro = new cashierCode(rs.getString("barcode"), rs.getString("name"), rs.getInt("quantity"));
                al.add(pro);
            }

            DefaultTableModel model = (DefaultTableModel) tblProduct.getModel();
            model.setRowCount(0);
            Object[] row = new Object[6];
            for (int i = 0; i < al.size(); i++) {
                row[0] = al.get(i).getBarcode();
                row[1] = al.get(i).getName();
                row[2] = al.get(i).getQty();
                model.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Cannot find Item Name", "Search Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtSearchNameKeyReleased

    private void txtSearchBarcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchBarcodeKeyReleased
        // TODO add your handling code here:        
        ArrayList<cashierCode> al = new ArrayList<cashierCode>();
        //al = new ArrayList<AddItems>();
        String val = txtSearchBarcode.getText().toString().trim();
        try {
            Connection con;
            Statement st;
            con = db.getConnection();
            st = con.createStatement();
            String query = "Select * from product where quantity > 0 AND barcode like '" + val + "%'";
            ResultSet rs = st.executeQuery(query);
            cashierCode pro;
            while (rs.next()) {
                pro = new cashierCode(rs.getString("barcode"), rs.getString("name"), rs.getInt("quantity"));
                al.add(pro);
            }

            DefaultTableModel model = (DefaultTableModel) tblProduct.getModel();
            model.setRowCount(0);
            Object[] row = new Object[6];
            for (int i = 0; i < al.size(); i++) {
                row[0] = al.get(i).getBarcode();
                row[1] = al.get(i).getName();
                row[2] = al.get(i).getQty();
                model.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Cannot find Item Name", "Search Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtSearchBarcodeKeyReleased

    private void tblProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductMouseClicked
        // TODO add your handling code here:
        int k = tblProduct.getSelectedRow();
        TableModel model1 = tblProduct.getModel();
        String barcode = (model1.getValueAt(k, 0).toString());
        txtSearchBarcode.setText(barcode);

        String name = "";
        float rprice = 0;
        boolean sameProduct = false;
        boolean status = false;
        int rowNumber = 0;
        int j = 0;
                float cost = 0;
            float bprice = 0;

        String type = cashier.txtType.getText();

        try {
            Connection con;
            Statement st;
            con = db.getConnection();
            st = con.createStatement();

            String query = "Select barcode,name,bprice,rprice,wprice From product where barcode = '" + txtSearchBarcode.getText() + "'";
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                barcode = rs.getString("barcode");
                name = rs.getString("name");
                    bprice = rs.getFloat("bprice");
                if (type == "Retail") {
                    rprice = rs.getFloat("rprice");
                } else {
                    rprice = rs.getFloat("wprice");
                }
                    cost = rprice - bprice;
                String searchBarcode = txtSearchBarcode.getText();
                if (searchBarcode.equals(barcode)) {
                    sameProduct = true;
                }
            }

            if (sameProduct == true) {
                //txtOk.requestFocus();
                DefaultTableModel model = new DefaultTableModel();
                model = (DefaultTableModel) cashier.tblBill.getModel();
                if (model.getRowCount() == 0) {
                    model.addRow(new Object[]{
                        barcode,
                        name,
                        cost,
                        rprice,
                        1,
                        0.00,
                        rprice,}
                    );
                } else {
                    for (int i = 0; i < model.getRowCount(); i++) {
                        String tableBarcode = model.getValueAt(i, 0).toString();
                        if (barcode.equals(tableBarcode)) {
                            status = true;
                            rowNumber = i;
                        }
                    }
                    if (status == true) {
                        int qunatity = Integer.parseInt(model.getValueAt(rowNumber, 4).toString()) + 1;
                        model.setValueAt(qunatity, rowNumber, 4);
                        float price = Float.parseFloat(model.getValueAt(rowNumber, 6).toString()) + rprice;
                        model.setValueAt(price, rowNumber, 5);

                        status = false;
                        rowNumber = 0;
                    } else {
                        model.addRow(new Object[]{
                            barcode,
                            name,
                            cost,
                            rprice,
                            1,
                            0.00,
                            rprice,}
                        );
                    }
                }

                sameProduct = false;
            } else {
                JOptionPane.showMessageDialog(null, "Invalid Barcode");
            }

            barcode = "";
            name = "";
            rprice = 0;
            sameProduct = true;
            status = false;
            rowNumber = 0;

            txtSearchBarcode.setText(null);
            txtSearchBarcode.requestFocus();

            float sum = 0;
            float discounttot = 0;
            for (int i = 0; i < cashier.tblBill.getRowCount(); i++) {
                discounttot = discounttot + Float.parseFloat(cashier.tblBill.getValueAt(i, 5).toString());//* (Double.parseDouble(jTableBill.getValueAt(i, 1).toString()) * Double.parseDouble(jTableBill.getValueAt(i, 2).toString())
                sum = sum + Float.parseFloat(cashier.tblBill.getValueAt(i, 6).toString());// - Double.parseDouble(tblBill.getValueAt(i, 4).toString());
                j = i + 1;
            }
            float returnamount = Float.parseFloat(cashier.txtReturn.getText());
            float finalsum = sum - returnamount;
            cashier.txtItem.setText(Integer.toString(j));
            cashier.txtTotalAmount.setText(String.valueOf(new DecimalFormat("0.00").format(finalsum)));
            cashier.txtTotalDiscount.setText(String.valueOf(new DecimalFormat("0.00").format(discounttot)));

            //txtQty.requestFocus();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);//"Cannot find Item Name", "Search Error", JOptionPane.ERROR_MESSAGE);
        }
        this.dispose();
    }//GEN-LAST:event_tblProductMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable tblProduct;
    private javax.swing.JTextField txtSearchBarcode;
    public static javax.swing.JTextField txtSearchName;
    // End of variables declaration//GEN-END:variables
}
